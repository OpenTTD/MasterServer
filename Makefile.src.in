# Auto-generated file -- DO NOT EDIT

CXX_HOST     = !!CXX_HOST!!
STRIP        = !!STRIP!!
CC_CFLAGS    = !!CC_CFLAGS!!
CFLAGS       = !!CFLAGS!!
CFLAGS_BUILD = !!CFLAGS_BUILD!!
LIBS         = !!LIBS!!
LDFLAGS      = !!LDFLAGS!!
BIN_DIR      = !!BIN_DIR!!
OBJS_DIR     = !!OBJS_DIR!!
SRC_DIR      = !!SRC_DIR!!
OS           = !!OS!!
MAKEDEPEND   = !!MAKEDEPEND!!
CFLAGS_MAKEDEP= !!CFLAGS_MAKEDEP!!
SORT         = !!SORT!!
MASTERSERVER = !!MASTERSERVER!!
UPDATER      = !!UPDATER!!
CONTENTSERVER= !!CONTENTSERVER!!
CONFIG_CACHE_COMPILER = $(OBJS_DIR)/!!CONFIG_CACHE_COMPILER!!
CONFIG_CACHE_LINKER   = $(OBJS_DIR)/!!CONFIG_CACHE_LINKER!!
CONFIG_CACHE_SOURCE   = $(OBJS_DIR)/!!CONFIG_CACHE_SOURCE!!
CONFIG_CACHE_VERSION  = $(OBJS_DIR)/!!CONFIG_CACHE_VERSION!!

OBJS_MASTERSERVER := !!OBJS_MASTERSERVER!!
OBJS_UPDATER      := !!OBJS_UPDATER!!
OBJS_CONTENTSERVER:= !!OBJS_CONTENTSERVER!!
OBJS              := !!OBJS!!
SRCS              := $(OBJS:%.o=%.cpp)

# All C-files depend on those files
FILE_DEP := $(CONFIG_CACHE_COMPILER)
# Create all dirs and subdirs
RES      := $(shell mkdir -p $(BIN_DIR) $(sort $(dir $(OBJS))))

# Make sure endian_target.h is reasable as if it was in the src/ dir
CFLAGS += -I $(OBJS_DIR) -I $(SRC_DIR)

# Check if we want to show what we are doing
ifdef VERBOSE
	Q =
	E = @true
else
	Q = @
	E = @echo
endif

# Our default target
all: $(MASTERSERVER) $(UPDATER) $(CONTENTSERVER)

# Make the revision number
ifdef REVISION
REV := $(REVISION)
else
# Are we a SVN dir?
ifeq ($(shell if test -d $(SRC_DIR)/.svn; then echo 1; fi), 1)
# Find if the local source if modified
REV_MODIFIED := $(shell svnversion $(SRC_DIR) | sed -n 's/.*\(M\).*/\1/p' )
# Find the revision like: rXXXX-branch
REV := $(shell LC_ALL=C svn info $(SRC_DIR) | awk '/^Last Changed Rev:/ { print "r"$$4"$(REV_MODIFIED)" }')
endif
endif
# Make sure we have something in REV
ifeq ($(REV),)
REV := norev000
endif

# This helps to recompile if flags change
RES := $(shell if [ "`cat $(CONFIG_CACHE_COMPILER) 2>/dev/null`" != "$(CC_CFLAGS) $(CFLAGS)" ]; then echo "$(CC_CFLAGS) $(CFLAGS)" > $(CONFIG_CACHE_COMPILER); fi )
RES := $(shell if [ "`cat $(CONFIG_CACHE_LINKER) 2>/dev/null`" != "$(LDFLAGS) $(LIBS)" ]; then echo "$(LDFLAGS) $(LIBS)" > $(CONFIG_CACHE_LINKER); fi )

# If there is a change in the source-file-list, make sure we recheck the deps
RES := $(shell if [ "`cat $(CONFIG_CACHE_SOURCE) 2>/dev/null`" != "$(SRCS)" ]; then echo "$(SRCS)" > $(CONFIG_CACHE_SOURCE); fi )
# If there is a change in the revision, make sure we recompile rev.cpp
RES := $(shell if [ "`cat $(CONFIG_CACHE_VERSION) 2>/dev/null`" != "$(REV)" ]; then echo "$(REV)" > $(CONFIG_CACHE_VERSION); fi )

ifndef MAKEDEPEND
# The slow, but always correct, dep-check
DEP_MASK := %.d
DEPS     := $(OBJS:%.o=%.d)

# Only include the deps if we are compiling everything
ifeq ($(filter %.o clean mrproper, $(MAKECMDGOALS)),)
-include $(DEPS)
else
# In case we want to compile a single target, include the .d file for it
ifneq ($(filter %.o, $(MAKECMDGOALS)),)
SINGLE_DEP := $(filter %.o, $(MAKECMDGOALS))
-include $(SINGLE_DEP:%.o=%.d)
endif
endif

# Find the deps via GCC. Rarely wrong, but a bit slow

$(OBJS:%.o=%.d): %.d: $(SRC_DIR)/%.cpp $(FILE_DEP)
	$(E) 'DEP $(<:$(SRC_DIR)/%.cpp=%.cpp)'
	$(Q)$(CXX_HOST) $(CC_CFLAGS) $(CFLAGS) -MM $< | sed 's#^$(@F:%.d=%.o):#$@ $(@:%.d=%.o):#' > $@

else
# The much faster, but can be wrong, dep-check
DEP_MASK :=
DEPS     := Makefile.dep

# Only include the deps if we are not cleaning
ifeq ($(filter depend clean mrproper, $(MAKECMDGOALS)),)
-include Makefile.dep
endif

# Make sure that only 'make depend' ALWAYS triggers a recheck
ifeq ($(filter depend, $(MAKECMDGOALS)),)
Makefile.dep: $(FILE_DEP) $(SRCS:%=$(SRC_DIR)/%) $(CONFIG_CACHE_SOURCE)
else
Makefile.dep: FORCE
endif
	$(E) 'DEP CHECK (all files)'
	$(Q)rm -f Makefile.dep.tmp
	$(Q)touch Makefile.dep.tmp

# Calculate the deps via makedepend
	$(Q)$(MAKEDEPEND) -f$(OBJS_DIR)/Makefile.dep.tmp -o.o -Y -v -- $(CFLAGS_MAKEDEP) -- $(SRCS:%=$(SRC_DIR)/%) 2>/dev/null

# Convert x:/... paths to /x/... for mingw
ifeq ($(OS), MINGW)
	@cat Makefile.dep.tmp | sed 's@\([a-zA-Z]\):/@/\1/@g' > Makefile.dep.tmp.mingw
	@cp Makefile.dep.tmp.mingw Makefile.dep.tmp
	@rm -f Makefile.dep.tmp.mingw
endif

# Remove all comments and includes that don't start with $(SRC_DIR)
# Remove $(SRC_DIR) from object-file-name
	@awk '                              \
	/^# DO NOT/ { print $$0 ; next}     \
	/^#/ {next}                         \
	/:/ {                               \
		left = NF - 1;                    \
		for (n = 2; n <= NF; n++) {       \
			if (match($$n, "^$(SRC_DIR)") == 0) { \
				$$n = "";                     \
				left--;                       \
			}                               \
		}                                 \
		gsub("$(SRC_DIR)/", "", $$1);     \
		if (left > 0) {                   \
			print $$0;                      \
			$$1 = "Makefile.dep:";          \
			print $$0;                      \
		}                                 \
		next                              \
	}                                   \
	{                                   \
		print $$0                         \
	}                                   \
	' < Makefile.dep.tmp | sed 's/  */ /g;s/ $$//' | $(SORT) > Makefile.dep

	$(Q)rm -f Makefile.dep.tmp Makefile.dep.tmp.bak

endif

# Avoid problems with deps if a .h file is deleted without the deps
#  being updated. Now the Makefile continues, the deps are recreated
#  and all will be fine.
%.h:
	@true


# Compile all the files according to the targets

$(OBJS): %.o: $(SRC_DIR)/%.cpp $(DEP_MASK) $(FILE_DEP)
	$(E) 'Compiling $(<:$(SRC_DIR)/%.cpp=%.cpp)'
	$(Q)$(CXX_HOST) $(CC_CFLAGS) $(CFLAGS) -c -o $@ $<

$(MASTERSERVER): rev.o $(OBJS_MASTERSERVER) $(CONFIG_CACHE_LINKER)
	$(E) 'Linking $@'
	$(Q)$(CXX_HOST) $(LDFLAGS) rev.o $(OBJS_MASTERSERVER) $(LIBS) -o $@
ifdef STRIP
	$(Q)$(STRIP) $@
endif
	$(Q)cp -f $@ $(BIN_DIR)/

$(UPDATER): rev.o $(OBJS_UPDATER) $(CONFIG_CACHE_LINKER)
	$(E) 'Linking $@'
	$(Q)$(CXX_HOST) $(LDFLAGS) rev.o $(OBJS_UPDATER) $(LIBS) -o $@
ifdef STRIP
	$(Q)$(STRIP) $@
endif
	$(Q)cp $@ $(BIN_DIR)/

$(CONTENTSERVER): rev.o $(OBJS_CONTENTSERVER) $(CONFIG_CACHE_LINKER)
	$(E) 'Linking $@'
	$(Q)$(CXX_HOST) $(LDFLAGS) rev.o $(OBJS_CONTENTSERVER) $(LIBS) -o $@
ifdef STRIP
	$(Q)$(STRIP) $@
endif
	$(Q)cp $@ $(BIN_DIR)/

# setting the revision number in a place, there the binary can read it
rev.cpp: $(CONFIG_CACHE_VERSION)
	@echo 'const char *_revision = "$(REV)";' > rev.cpp

rev.o: rev.cpp $(FILE_DEP)
	$(E) 'Compiling $(<:$(SRC_DIR)/%.cpp=%.cpp)'
	$(Q)$(CXX_HOST) $(CC_CFLAGS) $(CFLAGS) -c -o $@ $<

FORCE:

depend: $(DEPS)

clean:
	$(E) 'Cleaning up object files'
	$(Q)rm -f $(DEPS) $(OBJS) $(MASTERSERVER) $(MASTERSERVER:%=$(BIN_DIR)/%) $(UPDATER) $(UPDATER:%=$(BIN_DIR)/%) $(CONFIG_CACHE_COMPILER) $(CONFIG_CACHE_LINKER) $(CONFIG_CACHE_ENDIAN) $(CONFIG_CACHE_SOURCE) $(ENDIAN_TARGETS) rev.o

mrproper: clean
	$(Q)rm -f rev.cpp

%.o:
	@echo 'No such source-file: $(@:%.o=%).cpp'

.PHONY: all mrproper depend clean FORCE
